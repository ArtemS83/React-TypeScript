{"version":3,"sources":["components/Navbar.tsx","components/TodoForm.tsx","components/TodoList.tsx","App.tsx","index.tsx"],"names":["Navbar","className","href","TodoForm","onSubmit","useState","text","setText","evt","preventDefault","id","type","value","onChange","event","target","htmlFor","TodoList","todos","onToggleCompleted","onDeleteTodo","length","map","completed","classNames","checked","onClick","getInitialTodoState","savedTodos","localStorage","getItem","JSON","parse","App","setTodos","useEffect","setItem","stringify","basename","newTodo","shortid","generate","prevTodos","todoId","filter","todo","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OAEaA,EAAkC,WAC7C,OACE,8BACE,sBAAKC,UAAU,gCAAf,UACE,mBAAGC,KAAK,IAAID,UAAU,aAAtB,sBAGA,qBAAIA,UAAU,6BAAd,UACE,6BACE,mBAAGC,KAAK,IAAR,qBAEF,6BACE,mBAAGA,KAAK,IAAR,iCC+BGC,EAtC4B,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC5C,EAAwBC,mBAAiB,IAAzC,mBAAOC,EAAP,KAAaC,EAAb,KAkBA,OACE,mCACE,uBAAMN,UAAU,sBAAsBG,SAXvB,SAACI,GAClBA,EAAIC,iBAIJL,EAASE,GACTC,EAAQ,KAKN,UACE,uBACEG,GAAG,OACHC,KAAK,OAELC,MAAON,EACPL,UAAU,WACVY,SAtBc,SAACC,GACrBP,EAAQO,EAAMC,OAAOH,UAuBjB,uBAAOI,QAAQ,OAAOf,UA1BV,qBA0BZ,8B,iBCmBOgB,EAzC4B,SAAC,GAIrC,IAHLC,EAGI,EAHJA,MACAC,EAEI,EAFJA,kBACAC,EACI,EADJA,aAEA,OACE,mCACGF,EAAMG,OAAS,EACd,oBAAIpB,UAAU,WAAd,SACGiB,EAAMI,KAAI,gBAAGZ,EAAH,EAAGA,GAAIJ,EAAP,EAAOA,KAAMiB,EAAb,EAAaA,UAAb,OACT,oBAEEtB,UAAWuB,IAAW,WAAY,CAChCD,UAAWA,IAHf,SAME,kCACE,uBACEZ,KAAK,WACLc,QAASF,EACTV,SAAU,kBAAMM,EAAkBT,MAEpC,+BAAOJ,IACP,wBACEK,KAAK,SACLV,UAAU,gBACVyB,QAAS,kBAAMN,EAAaV,IAH9B,wBAZGA,QAwBX,mBAAGT,UAAU,SAAb,yB,iBCrCF0B,EAAsB,WAC1B,IAAMC,EAAaC,aAAaC,QAAQ,WAExC,OAAOF,EAAaG,KAAKC,MAAMJ,GAAc,IAgDhCK,EA7CO,WACpB,MAA0B5B,mBAAkBsB,GAA5C,mBAAOT,EAAP,KAAcgB,EAAd,KAEAC,qBAAU,WACRN,aAAaO,QAAQ,UAAWL,KAAKM,UAAUnB,MAC9C,CAACA,IAuBJ,OACE,mCACE,eAAC,IAAD,CAAYoB,SAAS,IAArB,UACE,cAAC,EAAD,IACA,sBAAKrC,UAAU,YAAf,UACE,cAAC,EAAD,CAAUG,SA1BK,SAACE,GACtB,IAAMiC,EAAiB,CACrB7B,GAAI8B,IAAQC,WACZnC,OACAiB,WAAW,GAEbW,GAAS,SAAAQ,GAAS,OAAKH,GAAL,mBAAiBG,UAqB7B,cAAC,EAAD,CACExB,MAAOA,EACPE,aAZgB,SAACuB,GACzBT,GAAS,SAAAQ,GAAS,OAAIA,EAAUE,QAAO,SAAAC,GAAI,OAAIA,EAAKnC,KAAOiC,SAYnDxB,kBArBqB,SAACwB,GAC9BT,GAAS,SAAAQ,GAAS,OAChBA,EAAUpB,KAAI,SAAAuB,GAAI,OAChBA,EAAKnC,KAAOiC,EAAZ,2BAA0BE,GAA1B,IAAgCtB,WAAYsB,EAAKtB,YAAcsB,oBCjCvEC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.77da7e21.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const Navbar: React.FunctionComponent = () => {\r\n  return (\r\n    <nav>\r\n      <div className=\"nav-wrapper lime accent-4 px1\">\r\n        <a href=\"/\" className=\"brand-logo\">\r\n          React+TS\r\n        </a>\r\n        <ul className=\"right hide-on-med-and-down\">\r\n          <li>\r\n            <a href=\"/\">Todos</a>\r\n          </li>\r\n          <li>\r\n            <a href=\"/\">About us</a>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n","import React, { useRef, useState } from 'react';\r\n\r\ninterface ITodoFormProps {\r\n  onSubmit(text: string): void;\r\n}\r\n\r\n// const TodoForm: React.FC<{ onSubmit: (text: string) => void }> = ({\r\nconst TodoForm: React.FC<ITodoFormProps> = ({ onSubmit }) => {\r\n  const [text, setText] = useState<string>('');\r\n  // const ref = useRef<HTMLInputElement>(null);\r\n\r\n  let activeClass = 'label color active';\r\n\r\n  const changeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const handelForm = (evt: React.FormEvent<HTMLFormElement>) => {\r\n    evt.preventDefault();\r\n    // console.log(ref.current!.value);\r\n    // console.log(ref.current!.isConnected); // true or false\r\n    // ref.current!.value /= ''; // setText('');\r\n    onSubmit(text);\r\n    setText('');\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form className=\"input-field col s12\" onSubmit={handelForm}>\r\n        <input\r\n          id=\"text\"\r\n          type=\"text\"\r\n          // ref={ref}\r\n          value={text}\r\n          className=\"validate\"\r\n          onChange={changeHandler}\r\n        />\r\n        <label htmlFor=\"text\" className={activeClass}>\r\n          Enter text\r\n        </label>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TodoForm;\r\n","import React from 'react';\r\nimport classNames from 'classnames';\r\n\r\ninterface ITodo {\r\n  id: string;\r\n  text: string;\r\n  completed: boolean;\r\n}\r\n\r\ninterface ITodoListProps {\r\n  todos: ITodo[];\r\n  onToggleCompleted: (todoId: string) => void;\r\n  //   onDeleteTodo: (todoId: string) => void;\r\n  onDeleteTodo(todoId: string): void;\r\n}\r\nconst TodoList: React.FC<ITodoListProps> = ({\r\n  todos,\r\n  onToggleCompleted,\r\n  onDeleteTodo,\r\n}) => {\r\n  return (\r\n    <>\r\n      {todos.length > 0 ? (\r\n        <ul className=\"TodoList\">\r\n          {todos.map(({ id, text, completed }) => (\r\n            <li\r\n              key={id}\r\n              className={classNames('todoItem', {\r\n                completed: completed,\r\n              })}\r\n            >\r\n              <label>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={completed}\r\n                  onChange={() => onToggleCompleted(id)}\r\n                />\r\n                <span>{text}</span>\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"TodoList__btn\"\r\n                  onClick={() => onDeleteTodo(id)}\r\n                >\r\n                  Delete\r\n                </button>\r\n              </label>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      ) : (\r\n        <p className=\"center\">No Todos</p>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","import React, { useState, useEffect } from 'react';\nimport { HashRouter, Route, Link } from 'react-router-dom';\nimport { Navbar } from './components/Navbar';\nimport TodoForm from './components/TodoForm';\nimport TodoList from './components/TodoList';\nimport shortid from 'shortid';\n\ninterface ITodo {\n  id: string;\n  text: string;\n  completed: boolean;\n}\n\nconst getInitialTodoState = () => {\n  const savedTodos = localStorage.getItem('todosTS');\n\n  return savedTodos ? JSON.parse(savedTodos) : [];\n};\n\nconst App: React.FC = () => {\n  const [todos, setTodos] = useState<ITodo[]>(getInitialTodoState);\n\n  useEffect(() => {\n    localStorage.setItem('todosTS', JSON.stringify(todos));\n  }, [todos]);\n\n  const addTodoHandler = (text: string) => {\n    const newTodo: ITodo = {\n      id: shortid.generate(),\n      text,\n      completed: false,\n    };\n    setTodos(prevTodos => [newTodo, ...prevTodos]);\n  };\n\n  const toggleCompletedHandler = (todoId: string) => {\n    setTodos(prevTodos =>\n      prevTodos.map(todo =>\n        todo.id === todoId ? { ...todo, completed: !todo.completed } : todo,\n      ),\n    );\n  };\n\n  const deleteTodoHandler = (todoId: string) => {\n    setTodos(prevTodos => prevTodos.filter(todo => todo.id !== todoId));\n  };\n\n  return (\n    <>\n      <HashRouter basename=\"/\">\n        <Navbar />\n        <div className=\"container\">\n          <TodoForm onSubmit={addTodoHandler} />\n          <TodoList\n            todos={todos}\n            onDeleteTodo={deleteTodoHandler}\n            onToggleCompleted={toggleCompletedHandler}\n          />\n        </div>\n      </HashRouter>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}